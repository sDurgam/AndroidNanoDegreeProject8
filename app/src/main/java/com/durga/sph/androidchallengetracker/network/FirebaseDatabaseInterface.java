package com.durga.sph.androidchallengetracker.network;

import android.util.Log;

import com.durga.sph.androidchallengetracker.ui.listeners.IGetQuestionsInterface;
import com.durga.sph.androidchallengetracker.ui.listeners.IListener;
import com.durga.sph.androidchallengetracker.orm.TrackerQuestion;
import com.durga.sph.androidchallengetracker.ui.listeners.IOnItemClickListener;
import com.durga.sph.androidchallengetracker.ui.listeners.IOnReviewerItemClickListerner;
import com.durga.sph.androidchallengetracker.utils.Constants;
import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.MutableData;
import com.google.firebase.database.Transaction;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by root on 2/8/17.
 */

public abstract class FirebaseDatabaseInterface {

    //Firebase variables
    FirebaseDatabase mFireBaseDatabase;
    DatabaseReference mDatabaseReference;
    ChildEventListener mquestionChildEventListener;
    boolean isInitialValueLoaded = true;
    public FirebaseDatabaseInterface(){
        mFireBaseDatabase = FirebaseDatabase.getInstance();
        mDatabaseReference = mFireBaseDatabase.getReference().child(Constants.TRACKER);
    }

    public String getNewId(String key){
        DatabaseReference pushedQuestionRef = mDatabaseReference.child(key).push();
        // Get the unique ID generated by a push()
        return pushedQuestionRef.getKey();
    }

    public void addNewQuestion(String key, final TrackerQuestion value){
        DatabaseReference reviewerRef = mDatabaseReference.child(Constants.QUESTIONS);
        final String Id = reviewerRef.push().getKey();
        value.setId(Id);
        reviewerRef.child(Id).setValue(value, new DatabaseReference.CompletionListener() {
            @Override
            public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
                if(databaseError != null){

                }
            }
        });
    }

    public void registerQuestionsByLevelEventListener(String key, final IListener listener, final int level){
        mquestionChildEventListener = new ChildEventListener() {
            @Override
            public void onChildAdded(DataSnapshot dataSnapshot, String s) {
                Log.d("tag", "added");
                if(isInitialValueLoaded) return;

                TrackerQuestion question = dataSnapshot.getValue(TrackerQuestion.class);
                if(!question.isSpam() && question.level == level && (question.reviewers == null || question.reviewers.size() <= 3)){
                    question.setId(String .valueOf(System.currentTimeMillis()));
                    //listener.add(question);
                }
            }

            @Override
            public void onChildChanged(DataSnapshot dataSnapshot, String s) {
                Log.d("tag", "changed");
            }

            @Override
            public void onChildRemoved(DataSnapshot dataSnapshot) {
                Log.d("tag", dataSnapshot.getValue().toString());
            }

            @Override
            public void onChildMoved(DataSnapshot dataSnapshot, String s) {
                Log.d("tag", "moved");
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {
                Log.d("tag", databaseError.toString());
            }
        };
        mDatabaseReference.child(key).addChildEventListener(mquestionChildEventListener);
    }

    public void unregisterEventListener(String key){
        if(mquestionChildEventListener != null) {
            mDatabaseReference.child(key).removeEventListener(mquestionChildEventListener);
        }
    }


    public void markQuestionAsSpam(String questionId, final IOnItemClickListener listener) {
        mDatabaseReference.child(Constants.QUESTIONS).child(questionId).runTransaction(new Transaction.Handler() {
            @Override
            public Transaction.Result doTransaction(MutableData mutableData) {
                // Set value and report transaction success
                TrackerQuestion question = mutableData.getValue(TrackerQuestion.class);
                if(question != null) {
                    question.setSpam(true);
                    mutableData.setValue(question);
                    return Transaction.success(mutableData);
                }
                else {
                    return Transaction.abort();
                }
            }
            @Override
            public void onComplete(DatabaseError databaseError, boolean b,
                                   DataSnapshot dataSnapshot) {
                // Transaction completed
                listener.isSuccess(databaseError == null);
                Log.d(getClass().getName(), "saved review question:" + databaseError);
            }
        });
    }

    public void updateReviewersForQuestion(final String user, String questionId, final boolean isApproved, final IOnReviewerItemClickListerner listener) {
        DatabaseReference reviewerRef = mDatabaseReference.child(Constants.QUESTIONS).child(questionId);
        reviewerRef.runTransaction(new Transaction.Handler() {
            @Override
            public Transaction.Result doTransaction(MutableData mutableData) {
                TrackerQuestion question = mutableData.getValue(TrackerQuestion.class);
                List<String> reviewersList;

                if (question == null) {
                    return Transaction.success(mutableData);
                }

                if (question.reviewers == null) {
                    reviewersList = new ArrayList<>();
                    reviewersList.add(user);
                    question.reviewers = reviewersList;
                } else {
                    if(!question.reviewers.contains(user)) {
                        question.reviewers.add(user);
                    }
                }
                if(isApproved){
                    question.upvote++;
                }
                else {
                    question.upvote--;
                }
                // Set value and report transaction success
                mutableData.setValue(question);
                return Transaction.success(mutableData);
            }

            @Override
            public void onComplete(DatabaseError databaseError, boolean b,
                                   DataSnapshot dataSnapshot) {
                // Transaction completed
                listener.isSuccess(databaseError == null);
                Log.d(getClass().getName(), "saved review question:" + databaseError);
            }

        });

    }
    //Fetch questions for review, myadded and myreviewed questions
    public void  getMoreQuestions(String key, String user, IGetQuestionsInterface callback, String start, String lastkey, int length){
    }

    //Fetch questions for review, myadded and myreviewed questions
    public void getQuestions(final String key, final String user, final IGetQuestionsInterface callback, int length){

    }


    //Fetch questions by level
    public void getQuestions(String key, final String filter1, final String filter2, final IGetQuestionsInterface callback, int length){

    }

    //Fetch questions by level
    public void getMoreQuestions(String key, final String filter1, final String filter2, final IGetQuestionsInterface callback, String start, String lastkey, int length){

    }

    public void addQuestion(){};
}
